% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load-data.R
\name{get.adjust}
\alias{get.adjust}
\title{Filter Study Data Set to Variables of Interest}
\usage{
get.adjust(stata, mods, filts = NULL)
}
\arguments{
\item{stata}{Study (ARIC or HUNT) dataset in stata format}

\item{mods}{List of paths to formatted csv files creating new adjustment
variables. Format of csv is detailed below. Files should be titled
\code{adjusted.csv} and the other \code{outcomes.csv}. This parameter is
required}

\item{filts}{List of path (singular) to formatted csv of the data filters to
be applied to the dataset}
}
\value{
Tibble with data from all variables found in the mods csv files.
}
\description{
This function filters and creates new variables from the study data. This
function takes csv file inputs that detail the new variable names and
formulas created from the variable names in the Stata file.
}
\details{
This function uses csv files to inject commands into
\code{\link[dplyr:mutate]{dplyr::mutate()}} and \code{\link[dplyr:filter]{dplyr::filter()}} functions. The format of the csv
file to properly execute the desired commands is detailed below. The
\code{mods} parameter is required and must be a list of path(s) to the csv
files. Convention is to include one file with the outcome
variables--including heart failure diagnosis variables and time to event
variables and another file including adjustment variables, such as
demographics and clinical history. The filter csv should include filtering
conditions, such as excluding patients with prevalent heart failure, and
the format of that csv is also detailed below.
}
\section{CSV Formatting}{

\subsection{Adjustment and Outcome Variables}{

Files must include a header for three columns--Variable, Expression, Label.
Then, a new row must be created for each new variable, its expression, and
its label. Expressions are R code snippets that calculate variables. Data in
tibble should be assumed to be attached--same as when tidyverse formats its
variables.

!! First row in adjustment variables must always be the study
identifier for merging purposes. !!
}

\subsection{Examples:}{
\subsection{Adjustment Variables:}{\tabular{lll}{
   Variable \tab Expression \tab Label \cr
   id \tab id \tab ARIC COHORT STUDY ID \cr
   age \tab v5age51 \tab Visit 5 Age \cr
   bmi \tab v5_bmi51 \tab Visit 5 BMI \cr
   race \tab as.factor(race == 1) \tab Subject Race (Black == 1) \cr
}


This table is coded in csv as:\cr

Variable, Expression, Label\cr
id, id, ARIC COHORT STUDY ID\cr
age, v5age51, Visit 5 Age\cr
bmi, v5_bmi51, Visit 5 BMI,\cr
race, as.factor(race == 1), Subject Race (Black == 1)\cr
}

\subsection{Outcomes Variables:}{\tabular{lll}{
   Variable \tab Expression \tab Label \cr
   hfdiag \tab !is.na(adjudhf_bwh) \tab Incident Heart Failure Dx \cr
   fuptime \tab as.double(adjudhfdate - v5date51) \tab V5 HF Follow Up Time \cr
}


This table is coded in csv as:\cr

Variable, Expression, Label\cr
hfdiag, !is.na(adjudhf_bwh), Incident Heart Failure Dx\cr
fuptime, as.double(adjudhfdate - v5date51), V5 HF Follow Up Time\cr

!! The First Row Must be the primary outcome, and the last row must be the
primary time to event variable. This quirk may be patched in the coming
versions.
}

}

\subsection{Filters CSV Format:}{

These files filter data according to exclusion criteria. Most used to remove
subjects with prevalent heart failure.
}

\subsection{Data Filters and Exclusions:}{

Files must include headers for three columns--Variable, Operator, Expression.
These headers represent the new variable, its filtering operation
(==, >, >=, <, <=, etc.), and the expression for this operation respectively.
}

\subsection{Examples:}{\tabular{lll}{
   Variable \tab Operator \tab Expression \cr
   v5_prevhf52 \tab == \tab FALSE \cr
   fuptime \tab > \tab 0 \cr
}


This table is coded in csv as:\cr

Variable, Operator, Expression\cr
v5_prevhf52, ==, FALSE\cr
fuptime, >, 0\cr
}
}

\examples{
\dontrun{
fifth.visit.study <-
  get.adjust(stata = haven::read_dta('data/ARICmaster_121820.dta'),
             mods  = list('data/visit-five/outcomes.csv',
                          'data/visit-five/adjusted.csv'),
             filts = list('data/visit-five/filters.csv'))

fifth.visit.echo <-
  get.adjust(stata = haven::read_dta('data/ARICmaster_121820.dta'),
             mods  = list('data/visit-five/echovars.csv'))
}
}
